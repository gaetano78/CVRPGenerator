# -*- coding: utf-8 -*-
"""STREAMLIT Dashboard - Generatore istanze Uchoa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nSozjnFgHEXC5bEHxJRrozDEAWylCCbs
"""

import streamlit as st
import sys
import random
import math
import os
import matplotlib.pyplot as plt
import io

# Set the page configuration
st.set_page_config(page_title="CVRP Generator", layout="wide")

# Add a title bar
st.markdown("<h1 style='text-align: center; color: navy;'>CVRP Generator</h1>", unsafe_allow_html=True)

# Create three columns with specified width ratios
col1, col2, col3 = st.columns([1, 2, 1])

# Constants
maxCoord = 1000  # Max grid size
decay = 40

# ... (Include all the helper functions adjusted as shown above)
# Semplice calcolo della distanza euclidea tra 2 punti x e y
def distance(x, y):
    return math.sqrt((x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2)

# Other constants and functions remain the same...


def generate_customer_positions(n, custPos, depot, randSeed):
    random.seed(randSeed)
    maxCoord = 1000  # Use the same maxCoord as in your script
    decay = 40
    nSeeds = random.randint(2, 6)
    # Rest of the function remains the same...


def generate_instance_content(instanceID, n, capacity, V, D, demandType):
    instanceName = (
        "XML"
        + str(n)
        + "_"
        + str(rootPos)
        + str(custPos)
        + str(demandType)
        + str(avgRouteSize)
        + "_"
        + format(instanceID, "02d")
    )
    content = ""
    content += "NAME : " + instanceName + "\n"
    content += "COMMENT : Generated as the XML100 dataset from the CVRPLIB\n"
    content += "TYPE : CVRP\n"
    content += "DIMENSION : " + str(n + 1) + "\n"
    content += "EDGE_WEIGHT_TYPE : EUC_2D\n"
    content += "CAPACITY : " + str(int(capacity)) + "\n"
    content += "NODE_COORD_SECTION\n"
    for i, v in enumerate(V):
        content += (
            "{:<4}".format(i + 1)
            + " "
            + "{:<4}".format(v[0])
            + " "
            + "{:<4}".format(v[1])
            + "\n"
        )
    content += "DEMAND_SECTION\n"
    if demandType != 6:
        random.shuffle(D)
    D = [0] + D
    for i, _ in enumerate(V):
        content += "{:<4}".format(i + 1) + " " + "{:<4}".format(D[i]) + "\n"
    content += "DEPOT_SECTION\n1\n-1\nEOF\n"
    return content

def plot_instance(V, seeds):
    x = [v[0] for v in V]
    y = [v[1] for v in V]
    x_s = [v[0] for v in seeds]
    y_s = [v[1] for v in seeds]

    fig, ax = plt.subplots(figsize=(8, 8))
    ax.scatter(x[1:], y[1:], marker="o", color="blue", edgecolor="blue", s=40)
    if seeds:
        ax.scatter(x_s, y_s, marker="o", color="magenta", edgecolor="magenta", s=40)
    ax.scatter([x[0]], [y[0]], marker="s", edgecolor="black", color="yellow", s=200)

    # Set axis limits with padding
    maxCoord = 1000
    padding = maxCoord * 0.05  # 5% padding
    ax.set_xlim(-padding, maxCoord + padding)
    ax.set_ylim(-padding, maxCoord + padding)

    # Turn off axis labels and ticks
    ax.set_xticks([])
    ax.set_yticks([])

    return fig

# Left column: Parameters input
with col1:
    st.header("Parameters")
    n = st.number_input("Number of customers (n)", min_value=1, max_value=1000, value=100)
    rootPos = st.selectbox("Depot positioning (rootPos)", options=[1, 2, 3], index=0,
                           format_func=lambda x: {1: "Random", 2: "Center", 3: "Top-left corner"}[x])
    custPos = st.selectbox("Customer positioning (custPos)", options=[1, 2, 3], index=0,
                           format_func=lambda x: {1: "Random", 2: "Clustered", 3: "Mixed"}[x])
    demandType = st.selectbox("Demand distribution type (demandType)", options=[1, 2, 3, 4, 5, 6, 7], index=0)
    avgRouteSize = st.selectbox("Average route size (avgRouteSize)", options=[1, 2, 3, 4, 5, 6], index=0)
    instanceID = st.number_input("Instance ID (instanceID)", min_value=1, value=1)
    randSeed = st.number_input("Random seed (randSeed)", min_value=0, value=1)

    # Add a button to start processing
    generate_button = st.button("Generate Instance")

# Center column: Display plot
with col2:
    if generate_button:
        # Seed the random number generator
        random.seed(randSeed)
        # Generate the instance
        depot = generate_depot(rootPos, maxCoord)
        V, seeds = generate_customer_positions(n, custPos, depot, randSeed)
        # Calculate 'r' based on avgRouteSize
        In = {1: (3, 5), 2: (5, 8), 3: (8, 12), 4: (12, 16), 5: (16, 25), 6: (25, 50)}
        r = random.uniform(In[avgRouteSize][0], In[avgRouteSize][1])
        D, sumDemands, maxDemand = generate_demands(V, demandType, r, n)
        capacity = compute_capacity(sumDemands, maxDemand, r, n)
        instance_content = generate_instance_content(instanceID, n, capacity, V, D, demandType)
        # Plot the instance
        fig = plot_instance(V, seeds)
        st.pyplot(fig)

# Right column: Display instance content and download button
with col3:
    if generate_button:
        st.header("Generated Instance")
        # Display the instance content in a scrollable text area
        st.text_area("Instance (.vrp format)", instance_content, height=400)
        # Provide a download button
        st.download_button(label="Download .vrp File", data=instance_content,
                           file_name=f"{instanceName}.vrp", mime="text/plain")
